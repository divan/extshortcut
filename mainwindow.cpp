// checksum 0xa193 version 0x30001
/*
  This file was generated by the Mobile Qt Application wizard of Qt Creator.
  MainWindow is a convenience class containing mobile device specific code
  such as screen orientation handling.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/

#include <QtCore/QCoreApplication>
#include <QtGui/QVBoxLayout>
#include <QtGui/QLabel>
#include <QtGui/QPixmap>
#include <QPushButton>
#include <QPainter>
#include <QSettings>
#include <QDebug>
#include <QDesktopServices>
#include <QUrl>
#include <QThread>
#include <QtDBus/QtDBus>
#include <QMoveEvent>
#include <QPoint>
#include <QTimer>
#include <QSize>

#include "images/noimages.xpm"
#include "mainwindow.h"
#include "optionsdialog.h"
#include "utils.h"

//#include "QsLog.h"
//#include "QsLogDest.h"

MainWindow::MainWindow(QWidget *parent)
    : QWidget(parent),
      _imageWidth(0),
      _imageHeight(0)
{

    QCoreApplication::setOrganizationName("XBASoft");
    QCoreApplication::setApplicationName("ExtShortcut");

    setAttribute(Qt::WA_TranslucentBackground);

    QVBoxLayout *topLayout = new QVBoxLayout(this);

    _lbCmd = new QLabel(this);
    _lbCmd->setPixmap(QPixmap(noimages_xpm));
    _lbCmd->setAttribute(Qt::WA_TranslucentBackground);
    topLayout->addWidget(_lbCmd, 0, Qt::AlignCenter);
    _lbLabel = new QLabel(this);
    topLayout->addWidget(_lbLabel, 0, Qt::AlignCenter);

    //_uuid = findUuid();
    //if (_uuid.isNull())
    //    close();

    //loadSettings();
#if !defined(Q_WS_MAEMO_5) && !defined(Q_WS_MAEMO_6)
    QPushButton *pb = new QPushButton("Options", this);
    topLayout->addWidget(pb);
    connect(pb, SIGNAL(clicked()), SLOT(showSettingsDialog()));

    //const QString sLogPath("/home/vadim/extshortcutlog.txt");
#else
    //const QString sLogPath("/home/user/extshortcutlog.txt");
#endif

    //QsLogging::Logger& logger = QsLogging::Logger::instance();
    //logger.setLoggingLevel(QsLogging::InfoLevel);
    //QsLogging::DestinationPtr fileDestination(QsLogging::DestinationFactory::MakeFileDestination(sLogPath) );
    //logger.addDestination(fileDestination.get());

}

QSize MainWindow::sizeHint() const
{
    QSize imgSize = _lbCmd->sizeHint();
    QSize lbSize = _lbLabel->sizeHint();
    QSize sz( imgSize.width() > lbSize.width() ? imgSize.width() : lbSize.width(), imgSize.height() + lbSize.height());
    return sz;
}

MainWindow::~MainWindow()
{
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    if (!_uuid.isNull())
    {
        QSettings settings;
        settings.beginGroup(_uuid.toString());
        settings.setValue("is_running", false);
        settings.setValue("appletId", "");
    }

    event->accept();
}

void MainWindow::mousePressEvent(QMouseEvent *event)
{
    if (_commandType == SC_TYPE_APPLICATION)
        launchApplication();
    else
        QDesktopServices::openUrl(QUrl(_command));
}

void MainWindow::moveEvent(QMoveEvent *event)
{
    QPoint position = event->pos();
    if (position.x() != 0 && position.y() != 0)
    {
        if (_uuid.isNull())
        {
            loadSettings();
        }
        else
        {
            QSettings settings;
            settings.beginGroup(_uuid.toString());
            settings.setValue("pos", event->pos());
        }
    }
}

void MainWindow::launchApplication() const
{
    QDBusConnection bus = QDBusConnection::sessionBus();
    // here we create the D-Bus interface for starting application
    QDBusInterface dbus_iface("com.nokia.HildonDesktop.AppMgr", "/com/nokia/HildonDesktop/AppMgr",
                              "com.nokia.HildonDesktop.AppMgr", bus);
    // here we send command 'LaunchApplication' with param _command
    dbus_iface.call("LaunchApplication",_command);
}

void MainWindow::showSettingsDialog()
{
    OptionsDialog dlg(_uuid);
    if (dlg.exec() == QDialog::Accepted)
    {
        if (_uuid.isNull())
            _uuid = QUuid::createUuid();
        loadSettingsStage2();
    }
}

void MainWindow::loadSettings()
{
    _uuid = findUuidById();
    if (!_uuid.isNull())
        loadSettingsStage2();
    else
    {
        _uuid = findUuid();
        loadSettingsStage2(true);
    }
}

void MainWindow::loadSettingsStage2(bool updatePos)
{
    QSettings settings;
    settings.beginGroup(_uuid.toString());
    settings.setValue("is_running", true);
    settings.setValue("appletId", _appletId);
    settings.sync();

    _label = settings.value("label","").toString();
    _lbLabel->setText(_label);
    if (!_label.isEmpty())
        _lbLabel->show();
    else
        _lbLabel->hide();

    QString image_file = settings.value("image_file","").toString();
    _imageWidth = settings.value("imageWidth",0).toInt();
    _imageHeight = settings.value("imageHeight",0).toInt();
    if (!image_file.isEmpty())
    {
        QPixmap img(image_file);
        if (_imageWidth && _imageHeight)
            img = img.scaled(_imageWidth, _imageHeight);
        _lbCmd->setPixmap(img);
#if defined(Q_WS_MAEMO_5) || defined(Q_WS_MAEMO_6)
        QSize imgSize = img.size();
        QSize lbSize = _lbLabel->sizeHint();
        QSize sz( imgSize.width() > lbSize.width() ? imgSize.width() : lbSize.width(), imgSize.height() + lbSize.height());
        resize(sz);
#endif
    }
    _commandType = settings.value("commandType",0).toInt();
    _command = settings.value("command","").toString().trimmed();
    if (_commandType == SC_TYPE_URL && ! _command.startsWith("http://", Qt::CaseInsensitive) && ! _command.startsWith("https://", Qt::CaseInsensitive))
        _command = QString("http://") + _command;

    _initialPoint = settings.value("pos", QPoint()).toPoint();
    if (!_initialPoint.isNull() && updatePos)
    {
        QTimer *timer = new QTimer(this);
        timer->setSingleShot(true);
        connect(timer, SIGNAL(timeout()), this, SLOT(initialMove()));
        timer->start();
    }
}

void MainWindow::initialMove()
{
    move(_initialPoint);
}

struct MyThread : public QThread { using QThread::msleep;};

QUuid MainWindow::findUuid()
{
    // wait until other extshortcut are reading settings
    int count = 0;
    while (!createLock() && count < 100)
        MyThread::msleep(100);
    if (count >= 100)
        return QUuid();

    QSettings settings;
    QStringList groups = settings.childGroups();
    QStringList::const_iterator constIterator;
    for (constIterator = groups.constBegin(); constIterator != groups.constEnd(); ++constIterator)
    {
        settings.beginGroup(*constIterator);
        bool is_running = settings.value("is_running", false).toBool();
        if (!is_running)
        {
            settings.setValue("is_running", true);
            settings.endGroup();
            unLock();
            return QUuid(*constIterator);
        }
        settings.endGroup();
    }
    unLock();
    return QUuid::createUuid();
}

QUuid MainWindow::findUuidById()
{
    QSettings settings;
    QStringList groups = settings.childGroups();
    QStringList::const_iterator constIterator;
    for (constIterator = groups.constBegin(); constIterator != groups.constEnd(); ++constIterator)
    {
        settings.beginGroup(*constIterator);
        if (_appletId == settings.value("appletId", "").toString())
        {
            settings.setValue("is_running", true);
            settings.endGroup();
            return QUuid(*constIterator);
        }
    }
    return QUuid();
}


